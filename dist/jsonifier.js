'use strict';

const _ = require('lodash');

function compiler(obj) {
    if (_.isFunction(obj)) {
        return obj();
    } else if (_.isObject(obj)) {
        let result = {};
        Object.keys(obj).forEach(key => result[key] = compiler(obj[key]));
        return result;
    }
    return obj;
}

function dynamicCustomiser(objValue, srcValue) {
    if (_.isFunction(srcValue)) {
        let result = srcValue();
        if (result.toString() === '[object Generator]') {
            srcValue = () => result.next().value;
        }
    }
    return srcValue;
}

module.exports = class JSONifier {

    constructor(state, ops) {
        this.options = {
            namespace: undefined,
            limit: -1,
            compiler: compiler
        };

        if (state instanceof JSONifier && _.isObject(ops)) {
            _.extend(this.options, ops);
        }

        if (_.isObject(state) && _.isUndefined(ops)) {
            _.extend(this.options, state);
        }

        if (state instanceof JSONifier) {
            this._state = _.cloneDeep(state._state);
        } else {
            this._state = {};
        }

        this._current = _.isUndefined(this.options.namespace) ? this._state : this._state[this.options.namespace] = this._state[this.options.namespace] || {};
    }

    add(method, generator) {
        if (_.isString(method)) {
            let obj = this._current;

            let steps = method.split('.');
            const final_step = steps.pop();

            steps.forEach(attrib => {
                obj[attrib] = obj.hasOwnProperty(attrib) && _.isObject(obj[attrib]) ? obj[attrib] : {};
                obj = obj[attrib];
            });

            obj[final_step] = _.assignWith(generator, generator, dynamicCustomiser);
            return this;
        }

        if (_.isUndefined(generator) && _.isObject(method)) {
            _.assignWith(this._current, method, dynamicCustomiser);
            return this;
        }

        throw Error('Illegal use of jsonifier#add');
    }

    build() {
        let that = this;
        return function* iterableJSONifier() {
            for (let i = 0; i != that.options.limit; i = (i + 1) % Number.MAX_SAFE_INTEGER) {
                yield that.options.compiler(that._state);
            }
        }();
    }
};
//# sourceMappingURL=data:application/json;base64,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bUIsRUFBRSxVQUFGLENBQWEsU0FBYixFQUF3QixTQUF4QixFQUFtQyxpQkFBbkMsQ0FBbkIsQ0Fkb0I7QUFlcEIsbUJBQU8sSUFBUCxDQWZvQjtTQUF4Qjs7QUFrQkEsWUFBSSxFQUFFLFdBQUYsQ0FBYyxTQUFkLEtBQTRCLEVBQUUsUUFBRixDQUFXLE1BQVgsQ0FBNUIsRUFBZ0Q7QUFDaEQsY0FBRSxVQUFGLENBQWEsS0FBSyxRQUFMLEVBQWUsTUFBNUIsRUFBb0MsaUJBQXBDLEVBRGdEO0FBRWhELG1CQUFPLElBQVAsQ0FGZ0Q7U0FBcEQ7O0FBS0EsY0FBTSxNQUFNLDhCQUFOLENBQU4sQ0F4Qm1CO0tBQXZCOztBQTJCQSxZQUFRO0FBQ0osWUFBSSxPQUFPLElBQVAsQ0FEQTtBQUVKLGVBQU8sVUFBVSxpQkFBVixHQUE4QjtBQUNqQyxpQkFBSSxJQUFJLElBQUUsQ0FBRixFQUFLLEtBQUssS0FBSyxPQUFMLENBQWEsS0FBYixFQUFvQixJQUFJLENBQUMsSUFBSSxDQUFKLENBQUQsR0FBVSxPQUFPLGdCQUFQLEVBQXlCO0FBQ3pFLHNCQUFNLEtBQUssT0FBTCxDQUFhLFFBQWIsQ0FBc0IsS0FBSyxNQUFMLENBQTVCLENBRHlFO2FBQTdFO1NBREcsRUFBUCxDQUZJO0tBQVI7Q0F4RGEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5cbmZ1bmN0aW9uIGNvbXBpbGVyKG9iaikge1xuICAgIGlmIChfLmlzRnVuY3Rpb24ob2JqKSkge1xuICAgICAgICByZXR1cm4gb2JqKCk7XG4gICAgfSBlbHNlIGlmIChfLmlzT2JqZWN0KG9iaikpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goa2V5ID0+IHJlc3VsdFtrZXldID0gY29tcGlsZXIob2JqW2tleV0pKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gZHluYW1pY0N1c3RvbWlzZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgaWYgKF8uaXNGdW5jdGlvbihzcmNWYWx1ZSkpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHNyY1ZhbHVlKCk7XG4gICAgICAgIGlmIChyZXN1bHQudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgR2VuZXJhdG9yXScpIHtcbiAgICAgICAgICAgIHNyY1ZhbHVlID0gKCkgPT4gcmVzdWx0Lm5leHQoKS52YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3JjVmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgSlNPTmlmaWVyIHtcblxuICAgIGNvbnN0cnVjdG9yKHN0YXRlLCBvcHMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgICAgICAgbmFtZXNwYWNlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBsaW1pdDogLTEsXG4gICAgICAgICAgICBjb21waWxlcjogY29tcGlsZXJcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoc3RhdGUgaW5zdGFuY2VvZiBKU09OaWZpZXIgJiYgXy5pc09iamVjdChvcHMpKSB7XG4gICAgICAgICAgICBfLmV4dGVuZCh0aGlzLm9wdGlvbnMsIG9wcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5pc09iamVjdChzdGF0ZSkgJiYgXy5pc1VuZGVmaW5lZChvcHMpKSB7XG4gICAgICAgICAgICBfLmV4dGVuZCh0aGlzLm9wdGlvbnMsIHN0YXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGF0ZSBpbnN0YW5jZW9mIEpTT05pZmllcikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBfLmNsb25lRGVlcChzdGF0ZS5fc3RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2N1cnJlbnQgPSBfLmlzVW5kZWZpbmVkKHRoaXMub3B0aW9ucy5uYW1lc3BhY2UpXG4gICAgICAgICAgICA/IHRoaXMuX3N0YXRlXG4gICAgICAgICAgICA6IHRoaXMuX3N0YXRlW3RoaXMub3B0aW9ucy5uYW1lc3BhY2VdID0gdGhpcy5fc3RhdGVbdGhpcy5vcHRpb25zLm5hbWVzcGFjZV0gfHwge31cbiAgICAgICAgICAgIDtcbiAgICB9XG5cbiAgICBhZGQobWV0aG9kLCBnZW5lcmF0b3IpIHtcbiAgICAgICAgaWYgKF8uaXNTdHJpbmcobWV0aG9kKSkge1xuICAgICAgICAgICAgbGV0IG9iaiA9IHRoaXMuX2N1cnJlbnQ7XG5cbiAgICAgICAgICAgIGxldCBzdGVwcyA9IG1ldGhvZC5zcGxpdCgnLicpO1xuICAgICAgICAgICAgY29uc3QgZmluYWxfc3RlcCA9IHN0ZXBzLnBvcCgpO1xuXG4gICAgICAgICAgICBzdGVwcy5mb3JFYWNoKGF0dHJpYiA9PiB7XG4gICAgICAgICAgICAgICAgb2JqW2F0dHJpYl0gPSBvYmouaGFzT3duUHJvcGVydHkoYXR0cmliKSAmJiBfLmlzT2JqZWN0KG9ialthdHRyaWJdKVxuICAgICAgICAgICAgICAgICAgICA/IG9ialthdHRyaWJdXG4gICAgICAgICAgICAgICAgICAgIDoge31cbiAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgIG9iaiA9IG9ialthdHRyaWJdO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIG9ialtmaW5hbF9zdGVwXSAgPSBfLmFzc2lnbldpdGgoZ2VuZXJhdG9yLCBnZW5lcmF0b3IsIGR5bmFtaWNDdXN0b21pc2VyKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uaXNVbmRlZmluZWQoZ2VuZXJhdG9yKSAmJiBfLmlzT2JqZWN0KG1ldGhvZCkpIHtcbiAgICAgICAgICAgIF8uYXNzaWduV2l0aCh0aGlzLl9jdXJyZW50LCBtZXRob2QsIGR5bmFtaWNDdXN0b21pc2VyKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgRXJyb3IoJ0lsbGVnYWwgdXNlIG9mIGpzb25pZmllciNhZGQnKTtcbiAgICB9XG5cbiAgICBidWlsZCgpIHtcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24qIGl0ZXJhYmxlSlNPTmlmaWVyKCkge1xuICAgICAgICAgICAgZm9yKGxldCBpPTA7IGkgIT0gdGhhdC5vcHRpb25zLmxpbWl0OyBpID0gKGkgKyAxKSAlIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgdGhhdC5vcHRpb25zLmNvbXBpbGVyKHRoYXQuX3N0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSgpO1xuICAgIH1cbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
