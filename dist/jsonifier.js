'use strict';

const _ = require('lodash');

function compiler(obj) {
    if (_.isFunction(obj)) {
        return obj();
    } else if (_.isObject(obj)) {
        let result = {};
        Object.keys(obj).forEach(key => result[key] = compiler(obj[key]));
        return result;
    }
    return obj;
}

function dynamicCustomiser(objValue, srcValue) {
    if (_.isFunction(srcValue)) {
        let result = srcValue();
        if (result.toString() === '[object Generator]') {
            srcValue = () => result.next().value;
        }
    }
    return srcValue;
}

module.exports = class JSONifier {

    constructor(state, ops) {
        this.options = {
            namespace: undefined,
            limit: -1,
            compiler: compiler
        };

        if (state instanceof JSONifier && _.isObject(ops)) {
            _.extend(this.options, ops);
        }

        if (_.isObject(state) && _.isUndefined(ops)) {
            _.extend(this.options, state);
        }

        if (state instanceof JSONifier) {
            this._state = _.cloneDeep(state._state);
        } else {
            this._state = {};
        }

        this._current = _.isUndefined(this.options.namespace) ? this._state : this._state[this.options.namespace] = this._state[this.options.namespace] || {};
    }

    add(method, generator) {
        if (_.isString(method)) {
            let obj = this._current;

            let steps = method.split('.');
            const final_step = steps.pop();

            steps.forEach(attrib => {
                obj[attrib] = obj.hasOwnProperty(attrib) && _.isObject(obj[attrib]) ? obj[attrib] : {};
                obj = obj[attrib];
            });

            obj[final_step] = _.assignWith(generator, generator, dynamicCustomiser);
            return this;
        }

        if (_.isUndefined(generator) && _.isObject(method)) {
            _.assignWith(this._current, method, dynamicCustomiser);
            return this;
        }

        throw Error('Illegal use of jsonifier#add');
    }

    build() {
        let that = this;
        return function* iterableJSONifier() {
            for (let i = 0; i != that.options.limit; i = (i + 1) % Number.MAX_SAFE_INTEGER) {
                yield that.options.compiler(that._state);
            }
        }();
    }
};
//# sourceMappingURL=data:application/json;base64,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QUFFLFVBQUYsQ0FBYSxTQUFiLEVBQXdCLFNBQXhCLEVBQW1DLGlCQUFuQyxDQUFuQixDQWRvQjtBQWVwQixtQkFBTyxJQUFQLENBZm9CO1NBQXhCOztBQWtCQSxZQUFJLEVBQUUsV0FBRixDQUFjLFNBQWQsS0FBNEIsRUFBRSxRQUFGLENBQVcsTUFBWCxDQUE1QixFQUFnRDtBQUNoRCxjQUFFLFVBQUYsQ0FBYSxLQUFLLFFBQUwsRUFBZSxNQUE1QixFQUFvQyxpQkFBcEMsRUFEZ0Q7QUFFaEQsbUJBQU8sSUFBUCxDQUZnRDtTQUFwRDs7QUFLQSxjQUFNLE1BQU0sOEJBQU4sQ0FBTixDQXhCbUI7S0FBdkI7O0FBMkJBLFlBQVE7QUFDSixZQUFJLE9BQU8sSUFBUCxDQURBO0FBRUosZUFBTyxVQUFVLGlCQUFWLEdBQThCO0FBQ2pDLGlCQUFJLElBQUksSUFBRSxDQUFGLEVBQUssS0FBSyxLQUFLLE9BQUwsQ0FBYSxLQUFiLEVBQW9CLElBQUksQ0FBQyxJQUFJLENBQUosQ0FBRCxHQUFVLE9BQU8sZ0JBQVAsRUFBeUI7QUFDekUsc0JBQU0sS0FBSyxPQUFMLENBQWEsUUFBYixDQUFzQixLQUFLLE1BQUwsQ0FBNUIsQ0FEeUU7YUFBN0U7U0FERyxFQUFQLENBRkk7S0FBUjtDQXhEYSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcblxuZnVuY3Rpb24gY29tcGlsZXIob2JqKSB7XG4gICAgaWYgKF8uaXNGdW5jdGlvbihvYmopKSB7XG4gICAgICAgIHJldHVybiBvYmooKTtcbiAgICB9IGVsc2UgaWYgKF8uaXNPYmplY3Qob2JqKSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChrZXkgPT4gcmVzdWx0W2tleV0gPSBjb21waWxlcihvYmpba2V5XSkpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBkeW5hbWljQ3VzdG9taXNlcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKHNyY1ZhbHVlKSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gc3JjVmFsdWUoKTtcbiAgICAgICAgaWYgKHJlc3VsdC50b1N0cmluZygpID09PSAnW29iamVjdCBHZW5lcmF0b3JdJykge1xuICAgICAgICAgICAgc3JjVmFsdWUgPSAoKSA9PiByZXN1bHQubmV4dCgpLnZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzcmNWYWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBKU09OaWZpZXIge1xuXG4gICAgY29uc3RydWN0b3Ioc3RhdGUsIG9wcykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgICAgICBuYW1lc3BhY2U6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGxpbWl0OiAtMSxcbiAgICAgICAgICAgIGNvbXBpbGVyOiBjb21waWxlclxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChzdGF0ZSBpbnN0YW5jZW9mIEpTT05pZmllciAmJiBfLmlzT2JqZWN0KG9wcykpIHtcbiAgICAgICAgICAgIF8uZXh0ZW5kKHRoaXMub3B0aW9ucywgb3BzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLmlzT2JqZWN0KHN0YXRlKSAmJiBfLmlzVW5kZWZpbmVkKG9wcykpIHtcbiAgICAgICAgICAgIF8uZXh0ZW5kKHRoaXMub3B0aW9ucywgc3RhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXRlIGluc3RhbmNlb2YgSlNPTmlmaWVyKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IF8uY2xvbmVEZWVwKHN0YXRlLl9zdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY3VycmVudCA9IF8uaXNVbmRlZmluZWQodGhpcy5vcHRpb25zLm5hbWVzcGFjZSlcbiAgICAgICAgICAgID8gdGhpcy5fc3RhdGVcbiAgICAgICAgICAgIDogdGhpcy5fc3RhdGVbdGhpcy5vcHRpb25zLm5hbWVzcGFjZV0gPSB0aGlzLl9zdGF0ZVt0aGlzLm9wdGlvbnMubmFtZXNwYWNlXSB8fCB7fVxuICAgICAgICAgICAgO1xuICAgIH1cblxuICAgIGFkZChtZXRob2QsIGdlbmVyYXRvcikge1xuICAgICAgICBpZiAoXy5pc1N0cmluZyhtZXRob2QpKSB7XG4gICAgICAgICAgICBsZXQgb2JqID0gdGhpcy5fY3VycmVudDtcblxuICAgICAgICAgICAgbGV0IHN0ZXBzID0gbWV0aG9kLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICBjb25zdCBmaW5hbF9zdGVwID0gc3RlcHMucG9wKCk7XG5cbiAgICAgICAgICAgIHN0ZXBzLmZvckVhY2goYXR0cmliID0+IHtcbiAgICAgICAgICAgICAgICBvYmpbYXR0cmliXSA9IG9iai5oYXNPd25Qcm9wZXJ0eShhdHRyaWIpICYmIF8uaXNPYmplY3Qob2JqW2F0dHJpYl0pXG4gICAgICAgICAgICAgICAgICAgID8gb2JqW2F0dHJpYl1cbiAgICAgICAgICAgICAgICAgICAgOiB7fVxuICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgb2JqID0gb2JqW2F0dHJpYl07XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgb2JqW2ZpbmFsX3N0ZXBdICA9IF8uYXNzaWduV2l0aChnZW5lcmF0b3IsIGdlbmVyYXRvciwgZHluYW1pY0N1c3RvbWlzZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5pc1VuZGVmaW5lZChnZW5lcmF0b3IpICYmIF8uaXNPYmplY3QobWV0aG9kKSkge1xuICAgICAgICAgICAgXy5hc3NpZ25XaXRoKHRoaXMuX2N1cnJlbnQsIG1ldGhvZCwgZHluYW1pY0N1c3RvbWlzZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBFcnJvcignSWxsZWdhbCB1c2Ugb2YganNvbmlmaWVyI2FkZCcpO1xuICAgIH1cblxuICAgIGJ1aWxkKCkge1xuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiogaXRlcmFibGVKU09OaWZpZXIoKSB7XG4gICAgICAgICAgICBmb3IobGV0IGk9MDsgaSAhPSB0aGF0Lm9wdGlvbnMubGltaXQ7IGkgPSAoaSArIDEpICUgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCB0aGF0Lm9wdGlvbnMuY29tcGlsZXIodGhhdC5fc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KCk7XG4gICAgfVxufTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
