'use strict';

const _ = require('lodash');

function compiler(obj) {
    if (_.isFunction(obj)) {
        return obj();
    } else if (_.isObject(obj)) {
        let result = {};
        Object.keys(obj).forEach(key => result[key] = compiler(obj[key]));
        return result;
    } else if (_.isArray(obj)) {
        return obj.map(compiler);
    }
    return obj;
}

module.exports = class JSONifier {

    constructor(state, ops) {
        this.options = _.extend({
            namespace: undefined,
            limit: -1,
            compiler: compiler
        }, ops);

        if (state instanceof JSONifier) {
            this._state = _.cloneDeep(state._state);
        } else if (_.isObject(state)) {
            this._state = _.cloneDeep(state);
        } else {
            this._state = {};
        }

        this._current = _.isUndefined(this.options.namespace) ? this._state : this._state[this.options.namespace] = this._state[this.options.namespace] || {};
    }

    add(method, generator) {
        if (_.isString(method)) {
            let obj = this._current;

            let steps = method.split('.');
            const final_step = steps.pop();

            steps.forEach(attrib => {
                obj[attrib] = obj.hasOwnProperty(attrib) && _.isObject(obj[attrib]) ? obj[attrib] : {};
                obj = obj[attrib];
            });

            if (_.isFunction(generator)) {
                let result = generator();
                if (result.toString() === '[object Generator]') {
                    generator = () => result.next().value;
                }
                obj[final_step] = result;
            } else {
                obj[final_step] = generator;
            }
            return this;
        }

        if (_.isUndefined(generator)) {
            if (_.isFunction(method)) {
                this._current = method;
                return this;
            }

            if (_.isObject(method)) {
                _.extend(this._current, method);
                return this;
            }
        }

        throw Error('Illegal use of jsonifier#add');
    }

    build() {
        let that = this;
        return function* iterableJSONifier() {
            for (let i = 0; i != that.options.limit; i = (i + 1) % Number.MAX_SAFE_INTEGER) {
                yield that.options.compiler(that._state);
            }
        }();
    }
};
//# sourceMappingURL=data:application/json;base64,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QkEsWUFBSSxFQUFFLFdBQUYsQ0FBYyxTQUFkLENBQUosRUFBOEI7QUFDMUIsZ0JBQUksRUFBRSxVQUFGLENBQWEsTUFBYixDQUFKLEVBQTBCO0FBQ3RCLHFCQUFLLFFBQUwsR0FBZ0IsTUFBaEIsQ0FEc0I7QUFFdEIsdUJBQU8sSUFBUCxDQUZzQjthQUExQjs7QUFLQSxnQkFBSSxFQUFFLFFBQUYsQ0FBVyxNQUFYLENBQUosRUFBd0I7QUFDcEIsa0JBQUUsTUFBRixDQUFTLEtBQUssUUFBTCxFQUFlLE1BQXhCLEVBRG9CO0FBRXBCLHVCQUFPLElBQVAsQ0FGb0I7YUFBeEI7U0FOSjs7QUFZQSxjQUFNLE1BQU0sOEJBQU4sQ0FBTixDQXZDbUI7S0FBdkI7O0FBMENBLFlBQVE7QUFDSixZQUFJLE9BQU8sSUFBUCxDQURBO0FBRUosZUFBTyxVQUFVLGlCQUFWLEdBQThCO0FBQ2pDLGlCQUFJLElBQUksSUFBRSxDQUFGLEVBQUssS0FBSyxLQUFLLE9BQUwsQ0FBYSxLQUFiLEVBQW9CLElBQUksQ0FBQyxJQUFJLENBQUosQ0FBRCxHQUFVLE9BQU8sZ0JBQVAsRUFBeUI7QUFDekUsc0JBQU0sS0FBSyxPQUFMLENBQWEsUUFBYixDQUFzQixLQUFLLE1BQUwsQ0FBNUIsQ0FEeUU7YUFBN0U7U0FERyxFQUFQLENBRkk7S0FBUjtDQWpFYSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcblxuZnVuY3Rpb24gY29tcGlsZXIob2JqKSB7XG4gICAgaWYgKF8uaXNGdW5jdGlvbihvYmopKSB7XG4gICAgICAgIHJldHVybiBvYmooKTtcbiAgICB9IGVsc2UgaWYgKF8uaXNPYmplY3Qob2JqKSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChrZXkgPT4gcmVzdWx0W2tleV0gPSBjb21waWxlcihvYmpba2V5XSkpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZWxzZSBpZiAoXy5pc0FycmF5KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG9iai5tYXAoY29tcGlsZXIpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIEpTT05pZmllciB7XG5cbiAgICBjb25zdHJ1Y3RvcihzdGF0ZSwgb3BzKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9ICBfLmV4dGVuZCh7XG4gICAgICAgICAgICBuYW1lc3BhY2U6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGxpbWl0OiAtMSxcbiAgICAgICAgICAgIGNvbXBpbGVyOiBjb21waWxlclxuICAgICAgICB9LCBvcHMpO1xuXG4gICAgICAgIGlmIChzdGF0ZSBpbnN0YW5jZW9mIEpTT05pZmllcikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBfLmNsb25lRGVlcChzdGF0ZS5fc3RhdGUpO1xuICAgICAgICB9IGVsc2UgaWYgKF8uaXNPYmplY3Qoc3RhdGUpKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IF8uY2xvbmVEZWVwKHN0YXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0ge307XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jdXJyZW50ID0gXy5pc1VuZGVmaW5lZCh0aGlzLm9wdGlvbnMubmFtZXNwYWNlKVxuICAgICAgICAgICAgPyB0aGlzLl9zdGF0ZVxuICAgICAgICAgICAgOiB0aGlzLl9zdGF0ZVt0aGlzLm9wdGlvbnMubmFtZXNwYWNlXSA9IHRoaXMuX3N0YXRlW3RoaXMub3B0aW9ucy5uYW1lc3BhY2VdIHx8IHt9XG4gICAgICAgICAgICA7XG4gICAgfVxuXG4gICAgYWRkKG1ldGhvZCwgZ2VuZXJhdG9yKSB7XG4gICAgICAgIGlmIChfLmlzU3RyaW5nKG1ldGhvZCkpIHtcbiAgICAgICAgICAgIGxldCBvYmogPSB0aGlzLl9jdXJyZW50O1xuXG4gICAgICAgICAgICBsZXQgc3RlcHMgPSBtZXRob2Quc3BsaXQoJy4nKTtcbiAgICAgICAgICAgIGNvbnN0IGZpbmFsX3N0ZXAgPSBzdGVwcy5wb3AoKTtcblxuICAgICAgICAgICAgc3RlcHMuZm9yRWFjaChhdHRyaWIgPT4ge1xuICAgICAgICAgICAgICAgIG9ialthdHRyaWJdID0gb2JqLmhhc093blByb3BlcnR5KGF0dHJpYikgJiYgXy5pc09iamVjdChvYmpbYXR0cmliXSlcbiAgICAgICAgICAgICAgICAgICAgPyBvYmpbYXR0cmliXVxuICAgICAgICAgICAgICAgICAgICA6IHt9XG4gICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICBvYmogPSBvYmpbYXR0cmliXTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoXy5pc0Z1bmN0aW9uKGdlbmVyYXRvcikpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gZ2VuZXJhdG9yKCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC50b1N0cmluZygpID09PSAnW29iamVjdCBHZW5lcmF0b3JdJykge1xuICAgICAgICAgICAgICAgICAgICBnZW5lcmF0b3IgPSAoKSA9PiByZXN1bHQubmV4dCgpLnZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvYmpbZmluYWxfc3RlcF0gPSByZXN1bHQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9ialtmaW5hbF9zdGVwXSA9IGdlbmVyYXRvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uaXNVbmRlZmluZWQoZ2VuZXJhdG9yKSkge1xuICAgICAgICAgICAgaWYgKF8uaXNGdW5jdGlvbihtZXRob2QpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudCA9IG1ldGhvZDtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF8uaXNPYmplY3QobWV0aG9kKSkge1xuICAgICAgICAgICAgICAgIF8uZXh0ZW5kKHRoaXMuX2N1cnJlbnQsIG1ldGhvZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBFcnJvcignSWxsZWdhbCB1c2Ugb2YganNvbmlmaWVyI2FkZCcpO1xuICAgIH1cblxuICAgIGJ1aWxkKCkge1xuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiogaXRlcmFibGVKU09OaWZpZXIoKSB7XG4gICAgICAgICAgICBmb3IobGV0IGk9MDsgaSAhPSB0aGF0Lm9wdGlvbnMubGltaXQ7IGkgPSAoaSArIDEpICUgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCB0aGF0Lm9wdGlvbnMuY29tcGlsZXIodGhhdC5fc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KCk7XG4gICAgfVxufTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
